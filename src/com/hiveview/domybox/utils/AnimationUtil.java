package com.hiveview.domybox.utils;import android.animation.AnimatorSet;import android.animation.ObjectAnimator;import android.annotation.SuppressLint;import android.content.Context;import android.os.Handler;import android.os.Message;import android.view.View;import android.view.animation.AccelerateInterpolator;import android.view.animation.AlphaAnimation;import android.view.animation.Animation;import android.view.animation.AnimationSet;import android.view.animation.AnimationUtils;import android.view.animation.LinearInterpolator;import android.view.animation.RotateAnimation;import android.view.animation.ScaleAnimation;import android.view.animation.TranslateAnimation;import com.hiveview.domybox.R;@SuppressLint("NewApi")public class AnimationUtil {		private static final int MSG_VIDEO_ANIMAL = 1;	private static Handler handler =new Handler(){		@Override		public void handleMessage(Message msg) {			switch (msg.what) {			case MSG_VIDEO_ANIMAL:				tVAnimatorSet.start();				break;			default:				break;			}		}			};         private static ScaleAnimation searchOutScaleAnimation;			private static TranslateAnimation tvTranslateAnimation;	//tv TranslateAnimation动画	private static ScaleAnimation tvScaleAnimation;			//tv ScaleAnimation动画	private static AlphaAnimation tvAlphaAnimation;			//tv AlphaAnimation动画	private static AnimatorSet tvAnimatorSet;				//tv AnimatorSet动画		public Animation mBigAnimation;	public Animation mLittleAnimation;		static LinearInterpolator LinearInterpolator = new LinearInterpolator();	private static AnimationSet tVAnimatorSet;	private static AnimationSet appAnimatorSet;	    public static Animation getBigAnimation(Context context) {    	Animation myAnimation = AnimationUtils.loadAnimation(context, R.anim.big_anim);    	myAnimation.setFillAfter(true);    	myAnimation.setFillBefore(true);    	myAnimation.setDuration(200);    	return myAnimation;    }        public static Animation getLitterAnimation(Context context) {    	Animation myAnimation = AnimationUtils.loadAnimation(context, R.anim.little_anim);    	myAnimation.setFillAfter(true);    	myAnimation.setFillBefore(true);    	myAnimation.setDuration(200);    	return myAnimation;    }    //    public static Animation getVideoAnimation(Context context) {//    	//    	AnimationUtils.loadAnimation(context, R.anim.animation_item_video);////    	return AnimationUtils.loadAnimation(context, R.anim.animation_item_video);//    }	public static void getBigAnimation(View v) {    	ObjectAnimator animBigX = ObjectAnimator .ofFloat(v, "scaleX", 1.1f);     	ObjectAnimator animBigY = ObjectAnimator .ofFloat(v, "scaleY", 1.1f);     	animBigX.setDuration(200);    	animBigY.setDuration(200);    	animBigX.start();    	animBigY.start();    }         public static void  getLittleAnimation(View v) {    	ObjectAnimator animLitterX = ObjectAnimator .ofFloat(v, "scaleX",  1f);    	ObjectAnimator animLitterY = ObjectAnimator .ofFloat(v, "scaleY",  1f);    	animLitterX.setDuration(200);         animLitterY.setDuration(200);        animLitterX.start();        animLitterY.start();    }        /** 获取放大动画1----1.5*/    public static ScaleAnimation getScaleAnimation(){    	if(searchOutScaleAnimation==null){    		searchOutScaleAnimation = new ScaleAnimation(1.0f, 1.1f,1.0f,1.1f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);    		searchOutScaleAnimation.setDuration(1);    		searchOutScaleAnimation.setInterpolator(new AccelerateInterpolator(1.0f));    		searchOutScaleAnimation.setFillEnabled(true);    		searchOutScaleAnimation.setFillAfter(true);    	}				return searchOutScaleAnimation;    }        /** 获取缩小的动画1.5----1*/    public static ScaleAnimation getZoomOutAnimation(){//    	if(searchInScaleAnimation==null){    		ScaleAnimation searchInScaleAnimation = new ScaleAnimation(1.1f, 1.0f,1.1f,1.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);    		searchInScaleAnimation.setDuration(1);    		searchInScaleAnimation.setInterpolator(new AccelerateInterpolator(1.0f));    		searchInScaleAnimation.setFillEnabled(true);    		searchInScaleAnimation.setFillAfter(true);//    	}		return searchInScaleAnimation;    }        /** 获取旋转动画*/    public static RotateAnimation getRotateAnimation(){    	    		RotateAnimation rotateAnimation = new RotateAnimation(0f,360f,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);     		rotateAnimation.setDuration(3000);//设置动画持续时间 			/** 常用方法 */     		rotateAnimation.setRepeatCount(-1);//设置重复次数 ------为-1时，不停止    		    		rotateAnimation.setInterpolator(new LinearInterpolator());    		rotateAnimation.setFillAfter(true);	//动画执行完后是否停留在执行完的状态     		rotateAnimation.setFillBefore(true);			//animation.setStartOffset(long startOffset);//执行前的等待时间     				return rotateAnimation;    }           /** 获取TVAnimatorSet */    public static AnimationSet  getTVAnimatorSet(){    	tVAnimatorSet=new AnimationSet(true);			//////////////////////////TranslateAnimation		tvTranslateAnimation =new TranslateAnimation(0, 0, -100, 0);		tvTranslateAnimation.setStartOffset(0);		//执行前的等待时间 		tvTranslateAnimation.setDuration(1000);		//设置动画持续时间 //		tvTranslateAnimation.setRepeatCount(-1);	//设置重复次数 ------为-1时，不停止		tvTranslateAnimation.setInterpolator(new LinearInterpolator());		tvTranslateAnimation.setFillAfter(true);		//动画执行完后是否停留在执行完的状态 						//////////////////////////////ScaleAnimation		tvScaleAnimation = new ScaleAnimation(1.0f, 1.5f,1.0f,1.5f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);		tvScaleAnimation.setDuration(1000);//    	tvScaleAnimation.setStartTime(3000);		tvScaleAnimation.setInterpolator(new LinearInterpolator());//		tvScaleAnimation.setRepeatCount(-1);		tvScaleAnimation.setStartOffset(2000);//执行前的等待时间 						///////////////////AlphaAnimation		tvAlphaAnimation = new AlphaAnimation(0.8f, 0); 		tvAlphaAnimation.setDuration(1000);			//设置动画持续时间 //    	tvScaleAnimation.setStartTime(3000);//		tvAlphaAnimation.setRepeatCount(-1);		//设置重复次数 		tvAlphaAnimation.setInterpolator(new LinearInterpolator());		tvAlphaAnimation.setFillAfter(true);		//动画执行完后是否停留在执行完的状态 		tvAlphaAnimation.setStartOffset(2000);		//执行前的等	待时间 						tVAnimatorSet.addAnimation(tvTranslateAnimation);		tVAnimatorSet.addAnimation(tvScaleAnimation);		tVAnimatorSet.addAnimation(tvAlphaAnimation);		tVAnimatorSet.setRepeatMode(-1);		//		handler.sendEmptyMessageDelayed(MSG_VIDEO_ANIMAL, 2500);		return tVAnimatorSet;    }                                /** 获取TranslateAnimation      * 如果view在A(x,y)点 那么动画就是从B点(x+fromXDelta, y+fromYDelta)点移动到C 点(x+toXDelta,y+toYDelta)点.     * TranslateAnimation(float fromXDelta, float toXDelta, float fromYDelta, float toYDelta)*/    public static TranslateAnimation getVideoSetAnimation(){//    	 AnimationSet set=new AnimationSet(true);    	     	 TranslateAnimation videoTranslateAnimation = new TranslateAnimation(-50.40f, 0, 0, 0); 		 videoTranslateAnimation.setDuration(800);//设置动画持续时间 		 /** 常用方法 */  		 videoTranslateAnimation.setRepeatCount(-1);//设置重复次数 ------为-1时，不停止 		 videoTranslateAnimation.setInterpolator(new LinearInterpolator());		 //animation.setFillAfter(boolean);//动画执行完后是否停留在执行完的状态 		 //animation.setStartOffset(long startOffset);//执行前的等待时间  		 		return videoTranslateAnimation;    }        /** 获取getAppAnimationOneSet */    public static AnimationSet getAppAnimationOneSet(){    	AnimationSet appAnimationOneSet = new AnimationSet(true);				ScaleAnimation appScaleAnimation = new ScaleAnimation(1.0f, 22.0f,1.0f,1.0f, Animation.RELATIVE_TO_SELF, 0f, Animation.RELATIVE_TO_SELF, 0.5f);		appScaleAnimation.setDuration(900);//    	appScaleAnimation.setStartTime(3000);		appScaleAnimation.setInterpolator(new LinearInterpolator());//		appScaleAnimation.setRepeatCount(-1);		appScaleAnimation.setFillAfter(true);		appScaleAnimation.setStartOffset(0);//执行前的等待时间 						TranslateAnimation appTranslateAnimation = new TranslateAnimation(0, 0, 0, -50);		appTranslateAnimation.setDuration(2000);//设置动画持续时间 //		appTranslateAnimation.setRepeatCount(-1);//设置重复次数 ------为-1时，不停止		appTranslateAnimation.setInterpolator(new LinearInterpolator());		appTranslateAnimation.setFillAfter(true);//动画执行完后是否停留在执行完的状态 		appTranslateAnimation.setStartOffset(2000);//执行前的等待时间 						appAnimationOneSet.addAnimation(appScaleAnimation);		appAnimationOneSet.addAnimation(appTranslateAnimation);//		appAnimationOneSet.setRepeatMode(-1);				return appAnimationOneSet;    }                    /** 获取getAppAnimationTwoSet */    public static AnimationSet getAppAnimationTwoSet(){    	AnimationSet appAnimationTwoSet = new AnimationSet(true);				ScaleAnimation appScaleAnimation = new ScaleAnimation(1.0f, 18.0f,1.0f,1.0f, Animation.RELATIVE_TO_SELF, 0f, Animation.RELATIVE_TO_SELF, 0.5f);		appScaleAnimation.setDuration(900);//    	appScaleAnimation.setStartTime(3000);		appScaleAnimation.setInterpolator(new LinearInterpolator());//		appScaleAnimation.setRepeatCount(-1);		appScaleAnimation.setFillAfter(true);		appScaleAnimation.setStartOffset(700);//执行前的等待时间 						TranslateAnimation appTranslateAnimation = new TranslateAnimation(0, 0, 0, -50);		appTranslateAnimation.setDuration(2000);//设置动画持续时间 //		appTranslateAnimation.setRepeatCount(-1);//设置重复次数 ------为-1时，不停止		appTranslateAnimation.setInterpolator(new LinearInterpolator());		appTranslateAnimation.setFillAfter(true);//动画执行完后是否停留在执行完的状态 		appTranslateAnimation.setStartOffset(2000);//执行前的等待时间 						appAnimationTwoSet.addAnimation(appScaleAnimation);		appAnimationTwoSet.addAnimation(appTranslateAnimation);//		appAnimationTwoSet.setRepeatMode(-1);				return appAnimationTwoSet;    }            /** 获取getAppAnimationThreeSet */    public static AnimationSet getAppAnimationThreeSet(){    	AnimationSet appAnimationThreeSet = new AnimationSet(true);				ScaleAnimation appScaleAnimation = new ScaleAnimation(1.0f, 12.0f,1.0f,1.0f, Animation.RELATIVE_TO_SELF, 0f, Animation.RELATIVE_TO_SELF, 0.5f);		appScaleAnimation.setDuration(400);//    	appScaleAnimation.setStartTime(3000);		appScaleAnimation.setInterpolator(new LinearInterpolator());//		appScaleAnimation.setRepeatCount(-1);		appScaleAnimation.setFillAfter(true);		appScaleAnimation.setStartOffset(1600);//执行前的等待时间 						TranslateAnimation appTranslateAnimation = new TranslateAnimation(0, 0, 0, -50);		appTranslateAnimation.setDuration(2000);//设置动画持续时间 //		appTranslateAnimation.setRepeatCount(-1);//设置重复次数 ------为-1时，不停止		appTranslateAnimation.setInterpolator(new LinearInterpolator());		appTranslateAnimation.setFillAfter(true);//动画执行完后是否停留在执行完的状态 		appTranslateAnimation.setStartOffset(2000);//执行前的等待时间 						appAnimationThreeSet.addAnimation(appScaleAnimation);		appAnimationThreeSet.addAnimation(appTranslateAnimation);//		appAnimationThreeSet.setRepeatMode(-1);				return appAnimationThreeSet;    }            /** 获取旋转动画*/    public static Animation getRotateAnimationFromXML(Context context){    	    	Animation myAnimation = AnimationUtils.loadAnimation(context, R.anim.rotate_animation);    	myAnimation.setFillAfter(true);    	myAnimation.setFillBefore(true);    	myAnimation.setInterpolator(new LinearInterpolator());    	    	return myAnimation;    }        /** 获取getAppAnimationOneSet */    public static AnimationSet getSettingsAnimation(){    	    	AnimationSet setAnimationSet = new AnimationSet(true);		//    	RotateAnimation rotateAnimation = new RotateAnimation(0f,360f,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f); //		rotateAnimation.setDuration(3000);//设置动画持续时间 //		/** 常用方法 */ ////		rotateAnimation.setRepeatCount(-1);//设置重复次数 ------为-1时，不停止//		//		rotateAnimation.setInterpolator(new LinearInterpolator());//		rotateAnimation.setFillAfter(true);	//动画执行完后是否停留在执行完的状态 ////		rotateAnimation.setFillBefore(true);//		//animation.setStartOffset(long startOffset);//执行前的等待时间 				//		TranslateAnimation setTranslateAnimation = new TranslateAnimation(0, 0, 0, -50);//		setTranslateAnimation.setDuration(2000);//设置动画持续时间 ////		setTranslateAnimation.setRepeatCount(-1);//设置重复次数 ------为-1时，不停止//		setTranslateAnimation.setInterpolator(new LinearInterpolator());//		setTranslateAnimation.setFillAfter(true);//动画执行完后是否停留在执行完的状态 //		setTranslateAnimation.setStartOffset(3000);//执行前的等待时间 				//		setAnimationSet.addAnimation(rotateAnimation);//		setAnimationSet.addAnimation(setTranslateAnimation);//		setAnimationSet.setRepeatMode(-1);    	    	    	    	    ///////////////////////////------------------------------------------------////    	tVAnimatorSet=new AnimationSet(true);    			//////////////////////////TranslateAnimation		tvTranslateAnimation =new TranslateAnimation(0, 0, -100, 0);		tvTranslateAnimation.setStartOffset(0);		//执行前的等待时间 		tvTranslateAnimation.setDuration(1000);		//设置动画持续时间 //		tvTranslateAnimation.setRepeatCount(-1);	//设置重复次数 ------为-1时，不停止		tvTranslateAnimation.setInterpolator(new LinearInterpolator());		tvTranslateAnimation.setFillAfter(true);		//动画执行完后是否停留在执行完的状态 						//////////////////////////////ScaleAnimation					tVAnimatorSet.addAnimation(tvTranslateAnimation);		tVAnimatorSet.setRepeatMode(-1);		//		handler.sendEmptyMessageDelayed(MSG_VIDEO_ANIMAL, 2500);//		return tVAnimatorSet;		setAnimationSet.addAnimation(tvTranslateAnimation);    					return setAnimationSet;    }    	/**       * Setup a new 3D rotation on the container view.       *       * @param position the item that was clicked to show a picture, or -1 to show the list       * @param start the start angle at which the rotation must begin       * @param end the end angle of the rotation       */       public static Rotate3dAnimation  apply3DRotation( View view,  float  start,  float  end) {     	 view.setVisibility(View.VISIBLE);         // 计算中心点           final   float  centerX = view.getWidth()/2.0f;           final   float  centerY = view.getHeight()/2.0f;            // Create a new 3D rotation with the supplied parameter           // The animation listener is used to trigger the next animation           final  Rotate3dAnimation rotation = new  Rotate3dAnimation(start, end, centerX, centerY,  310.0f,  false );           rotation.setDuration( 1000 );           rotation.setFillAfter( true );           rotation.setInterpolator( new  AccelerateInterpolator());           //设置监听  //         rotation.setAnimationListener( new  DisplayNextView(position));  //         view.startAnimation(rotation);           return rotation;    }    }